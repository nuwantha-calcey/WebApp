name: Changelog

on: 
  pull_request:
    types:
      - closed
    branches:
      - 'main'
      - 'development'
      - 'qa'
      - 'staging' 

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Generate changelog
        id: changelog
        uses: actions/github-script@v5
        with:
          script: |
            const { owner, repo } = context.repo
            const baseRef = '${{ github.event.pull_request.base.ref }}'
            const headRef = '${{ github.event.pull_request.head.ref }}'
            const baseCommitSha = await github.rest.git.getRef({ owner, repo, ref: 'heads/${baseRef}' }).then(res => res.data.object.sha)
            const headCommitSha = await github.rest.git.getRef({ owner, repo, ref: 'heads/${headRef}' }).then(res => res.data.object.sha)
            const compare = await github.rest.repos.compareCommits({ owner, repo, base: baseCommitSha, head: headCommitSha })
            const mergedPullRequests = compare.data.commits
              .filter(commit => commit.commit.message.startsWith('Merge pull request #'))
              .map(commit => {
                const match = commit.commit.message.match(/#(\d+)/)
                return match ? match[0] : null
              })
              .filter(Number)
            let changelog = ''
            for (const prNumber of mergedPullRequests) {
              const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNumber })
              const labels = pr.data.labels.map(label => label.name).join(', ')
              changelog += `- ${pr.data.title} (${labels})\n`
            }
            return changelog
      - name: Write changelog to file
        run: |
          echo "${{ steps.changelog.outputs.result }}" >> $GITHUB_STEP_SUMMARY
