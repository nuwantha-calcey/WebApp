name: Auto Deploy

on: 
  workflow_dispatch:
  pull_request:
    types:
      - closed
    branches:
      - 'main'
      - 'development'
      - 'qa'
      - 'staging' 

jobs:
  dump_github_context:
    runs-on: ubuntu-latest

    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

  generate-changelog:
    runs-on: ubuntu-latest

    name: Generate Changelog Markdown

    permissions:
      contents: read

    steps:
      - name: Generate Changelog
        id: changelog
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const { data } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'development',
              head: 'releases/sprint-1'
            });

            const mergedPRs = data.filter(pr => pr.merged_at !== null); 

            const featurePRs = mergedPRs.filter(pr => pr.labels.some(label => label.name === 'feature'));
            const bugFixPRs = mergedPRs.filter(pr => pr.labels.some(label => label.name === 'bug-fix'));

            let markdownContent = '';

            markdownContent = '### Features  \n';
            featurePRs.forEach(pr => markdownContent += - '${pr.title}  \n');

            markdownContent += '### Bug fixes  \n';
            bugFixPRs.forEach(pr => markdownContent += '- ${pr.title}  \n');

            return markdownContent;

      - name: Write changelog to job summary
        run: |
          echo "${{ steps.changelog.outputs.result }}" >> $GITHUB_STEP_SUMMARY

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Setup .NET 7
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      
      - name: Code Checkout
        uses: actions/checkout@v3

      - name: Restore Dependencies
        run: dotnet restore WebApp.sln
      
      - name: Build API
        run: dotnet build WebApp/WebApp.csproj --no-restore

  deploy-to-production:
    needs: build

    if: github.base_ref == 'main' && github.event.pull_request.merged == true

    runs-on: ubuntu-latest

    environment: production

    steps:
    - name: Code Checkout
      uses: actions/checkout@v3
      with:
        ref: 'main'

    - name: Deploy
      run: echo "Deployement to production"

  deploy-to-staging:
    needs: build

    if: github.base_ref == 'staging' && github.event.pull_request.merged == true

    runs-on: ubuntu-latest

    environment: staging

    steps:
    - name: Code Checkout
      uses: actions/checkout@v3
      with:
        ref: 'staging'

    - name: Deploy
      run: echo "Deployement to staging"

  deploy-to-development:
    needs: build

    if: github.base_ref == 'development' && github.event.pull_request.merged == true

    runs-on: ubuntu-latest

    environment: development

    steps:
    - name: Code Checkout
      uses: actions/checkout@v3
      with:
        ref: 'development'

    - name: Deploy
      run: echo "Deployement to development"

  deploy-to-qa:
    needs: build

    if: github.base_ref == 'qa' && github.event.pull_request.merged == true

    runs-on: ubuntu-latest

    environment: qa

    steps:
    - name: Code Checkout
      uses: actions/checkout@v3
      with:
        ref: 'qa'

    - name: Deploy
      run: echo "Deployement to qa"