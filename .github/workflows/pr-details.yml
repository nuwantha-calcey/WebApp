name: Pull Request detailer

on: 
  workflow_dispatch:
  pull_request:
    types:
      - opened

jobs:
  dump_github_context:
    runs-on: ubuntu-latest

    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

  get_commits:
    runs-on: ubuntu-latest

    steps:
      - name: Get Commits
        id: changelog
        uses: actions/github-script@v6
        with:
          script: |
            const baseSHA = context.payload.pull_request.base.sha;
            const headSHA = context.payload.pull_request.head.sha;
            console.log(`Base branch last commit: ${baseSHA}`);
            console.log(`Head branch last commit: ${headSHA}`);
            
            const perPage = 100;
            let page = 1;
            let allCommits = [];
            
            while (true) {
              const compare = await github.rest.repos.compareCommitsWithBasehead({
                owner: context.repo.owner,
                repo: context.repo.repo,
                basehead: `${baseSHA}...${headSHA}`,
                per_page: perPage,
                page: page
              });
            
              if (compare.data.commits.length === 0) {
                break;
              }
              
              allCommits = allCommits.concat(compare.data.commits);
              page++;
            }
            
            const mergeCommits = allCommits.filter(commit => commit.parents.length > 1 && commit.commit.verification.verified == true);

            const pullRequestDetails = [];

            for (const commit of mergeCommits) {
              const response = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: commit.sha
              });

              pullRequestDetails.push(...response.data);
            }

            const mergedPRs = pullRequestDetails.filter(pr => pr.merged_at !== null); 

            const featurePRs = mergedPRs.filter(pr => pr.labels.some(label => label.name === 'feature'));

            const bugFixPRs = mergedPRs.filter(pr => pr.labels.some(label => label.name === 'bug-fix'));

            let markdownContent = '';

            markdownContent = '### Features  \n';
            featurePRs.forEach(pr => markdownContent += '- ' + pr.title + '  \n');

            markdownContent += '### Bug fixes  \n';
            bugFixPRs.forEach(pr => markdownContent += '- ' + pr.title + '  \n');

            return markdownContent;

      - name: Write changelog to job summary
        run: |
          echo "${{ steps.changelog.outputs.result }}" >> $GITHUB_STEP_SUMMARY